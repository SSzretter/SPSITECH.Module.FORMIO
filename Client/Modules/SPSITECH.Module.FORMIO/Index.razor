@using SPSITECH.Module.FORMIO.Services
@using SPSITECH.Module.FORMIO.Models

@namespace SPSITECH.Module.FORMIO
@inherits ModuleBase
@inject IFORMIOService FORMIOService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Localizer

@if (_FORMIOs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add FORMIO" ResourceKey="Add" />
    <br />
    <br />
    @if (@_FORMIOs.Count != 0)
    {
        <Pager Items="@_FORMIOs">
            <Header>
                <th style="width: 1px;">&nbsp;</th>
                <th style="width: 1px;">&nbsp;</th>
                <th>@Localizer["Name"]</th>
            </Header>
            <Row>
                <td><ActionLink Action="Render" Parameters="@($"id=" + context.FORMIOId.ToString())" ResourceKey="Render" /></td>
                <td><ActionLink Action="Edit" Parameters="@($"id=" + context.FORMIOId.ToString())" ResourceKey="Edit"  /></td>
                <td><ActionDialog Header="Delete FORMIO" Message="Are You Sure You Wish To Delete This FORMIO?" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" ResourceKey="Delete"  Id="@context.FORMIOId.ToString()" /></td>
                <td>@context.Name</td>
            </Row>
        </Pager>
    }
    else
    {
        <p>@Localizer["Message.DisplayNone"]</p>
    }
}

@code {
    public override string RenderMode => RenderModes.Static;

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<FORMIO> _FORMIOs;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _FORMIOs = await FORMIOService.GetFORMIOsAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading FORMIO {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private async Task Delete(FORMIO FORMIO)
    {
        try
        {
            await FORMIOService.DeleteFORMIOAsync(FORMIO.FORMIOId, ModuleState.ModuleId);
            await logger.LogInformation("FORMIO Deleted {FORMIO}", FORMIO);
            _FORMIOs = await FORMIOService.GetFORMIOsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting FORMIO {FORMIO} {Error}", FORMIO, ex.Message);
            AddModuleMessage(Localizer["Message.DeleteError"], MessageType.Error);
        }
    }
}